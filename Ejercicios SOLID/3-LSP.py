# ðŸŸ¡ Ejercicio 3: Principio de SustituciÃ³n de Liskov (LSP)
# ðŸ‘‰ Problema: Se tiene una clase base Vehiculo y 
# una subclase Bicicleta. Sin embargo, la subclase 
# sobrescribe un mÃ©todo de forma inapropiada.

class Vehiculo:
    def encender(self):
        print("El vehÃ­culo estÃ¡ en marcha")

class Bicicleta(Vehiculo):
    def encender(self):
        raise Exception("Â¡Una bicicleta no se enciende!")
    
# # SOLUCIÃ“N

# from abc import ABC, abstractmethod

# class Vehiculo(ABC):
#     @abstractmethod
#     def mover():
#         pass
    
# class VehiculoMotorizado(Vehiculo):
#     def mover(self):
#         pass
        
# class VehiculoNoMotorizado(Vehiculo):
#     def mover(self):
#         pass
    
# class Carro(VehiculoMotorizado):
#     def mover(self):
#         print("Carro enciende y estÃ¡ en marcha")
    
# class Moto(VehiculoMotorizado):
#     def mover(self):
#         print("Moto enciende y estÃ¡ en marcha")
    
# class Bicicleta(VehiculoNoMotorizado):
#     def mover(self):
#         print("La bicicleta avanza al pedalear")    
        
# class Skate(VehiculoNoMotorizado):
#     def mover(self):
#         print("El skate avanza.") 
        
# vehiculos = [Carro(), Moto(), Bicicleta(), Skate()]
# for vehiculo in vehiculos:
#     vehiculo.mover()
    

# ðŸš€ **DesafÃ­o:** Refactoriza este cÃ³digo para que 
# las subclases puedan sustituir a la clase base 
# sin generar errores inesperados.
# âœ… Pista: Reestructura la jerarquÃ­a de clases 
# para que solo los vehÃ­culos motorizados hereden 
# el mÃ©todo arrancar.

